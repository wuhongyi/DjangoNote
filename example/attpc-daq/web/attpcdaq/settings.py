"""
Django settings for attpcdaq project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from datetime import timedelta
import logging

IS_PRODUCTION = 'DAQ_IS_PRODUCTION' in os.environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'attpcdaq.daq',
    'attpcdaq.tags',
    'attpcdaq.accounts',
    'attpcdaq.logs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'attpcdaq.daq.middleware.CurrentExperimentMiddleware',
]

ROOT_URLCONF = 'attpcdaq.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'attpcdaq', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'attpcdaq.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = 'daq/status'


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'attpcdaq', 'static'),
)

CRISPY_TEMPLATE_PACK = 'bootstrap3'

if IS_PRODUCTION:
    DEBUG = False
    ALLOWED_HOSTS = ['*']
    SECRET_KEY = os.environ['DAQ_SECRET_KEY']
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['POSTGRES_DB'],
            'USER': os.environ['POSTGRES_USER'],
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
            'HOST': os.environ['POSTGRES_HOST'],
            'PORT': os.environ['POSTGRES_PORT'],
        }
    }
    CRISPY_FAIL_SILENTLY = True
else:
    DEBUG = True
    ALLOWED_HOSTS = []
    SECRET_KEY = 'g-jvtk*p#4yli!hw=pm86%=!j=#_t!&!6pw8(8#&@lfngp$+vq'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    CRISPY_FAIL_SILENTLY = False

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s %(name)s] %(levelname)s: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'simple',
        },
        'database': {
            'class': 'attpcdaq.logs.handler.DjangoDatabaseHandler',
            'level': 'INFO',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'database'],
            'propagate': True,
            'level': 'WARNING',
        },
        'django.server': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'INFO',
        },
        'attpcdaq': {
            'handlers': ['console', 'database'],
            'propagate': True,
            'level': 'INFO',
        },
    }
}


# Celery configuration
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_RESULT_SERIALIZER = 'json'
CELERYD_HIJACK_ROOT_LOGGER = False

if IS_PRODUCTION:
    BROKER_URL = 'amqp://{}:{}'.format(os.environ['CELERY_BROKER_HOST'], os.environ['CELERY_BROKER_PORT'])
else:
    BROKER_URL = 'amqp://'

CELERY_RESULT_BACKEND = 'rpc://'

# Periodic tasks
CELERYBEAT_SCHEDULE = {
    'update-state-every-5-sec': {
        'task': 'attpcdaq.daq.tasks.eccserver_refresh_all_task',
        'schedule': timedelta(seconds=5),
    },
    'check-ecc-server-online-every-15-sec': {
        'task': 'attpcdaq.daq.tasks.check_ecc_server_online_all_task',
        'schedule': timedelta(seconds=15),
    },
    'check-data-router-status-every-15-sec': {
        'task': 'attpcdaq.daq.tasks.check_data_router_status_all_task',
        'schedule': timedelta(seconds=15),
    },
}
